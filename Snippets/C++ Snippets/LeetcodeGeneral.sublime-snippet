<snippet>
	<content><![CDATA[
#include <bits/stdc++.h>
using namespace std;


#define ll long long
#define debug(x) cout << #x  << " : " << x << "\n";
#define all(C) C.begin(), C.end()
#define getunique(v) {sort(all(v)); v.erase(unique(v.begin(), v.end()), v.end());}
#define nl '\n'
#define toLongLong(vec) vector<long long>((vec).begin(), (vec).end())
#define calcSum(vec) std::accumulate(vec.begin(), vec.end(), 0LL)

void dbg() { std::cout << std::endl; } template <typename T, typename... Args> void dbg(const T& first, const Args&... args) { std::cout << first << " "; dbg(args...); }
template<typename T1, typename T2> ostream& operator<<(ostream& out, const pair<T1, T2>& x) {return out << x.first << ' ' << x.second;}
template<typename T1, typename T2> istream& operator>>(istream& in, pair<T1, T2>& x) {return in >> x.first >> x.second;}
template<typename T> istream& operator>>(istream& in, vector<T>& a) {for(auto &x : a) in >> x; return in;};
template<typename T> ostream& operator<<(ostream& out, vector<T>& a) {for(auto &x : a) out << x << ' '; return out;};
template <class Fun> class y_combinator_result { Fun fun_; public: template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); } }; template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }
template<typename T> void pvec(const vector<T>& v) { cout << "["; for (size_t x = 0; x < v.size(); ++x) {cout << v[x]; if (x < v.size() - 1) cout << " "; } cout << "]" << endl; }


ll lcm(ll a,ll b) { return a * b / __gcd(a, b); }

const long long INF = 1e18;
const long long mod = 1e9 + 7;

$1

void test_case() {
    
    $2
    
}

signed main() {

    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    // freopen("error.txt", "w", stderr);
    
    ios::sync_with_stdio(false);
    cin.tie(0); 
    
    int t = 1;
    for(int i = 1; i <= t; i++) {
        test_case();
    }
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tl</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
