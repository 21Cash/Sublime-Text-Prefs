<snippet>
	<content><![CDATA[
class SegmentTree {
private:
    int n; // Size of the input array
    std::vector<int> min_tree; // Segment tree for minimum values
    std::vector<int> max_tree; // Segment tree for maximum values

    void build(int node, int start, int end, const std::vector<int>& arr) {
        if (start == end) {
            min_tree[node] = arr[start];
            max_tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(2 * node, start, mid, arr);
            build(2 * node + 1, mid + 1, end, arr);
            min_tree[node] = std::min(min_tree[2 * node], min_tree[2 * node + 1]);
            max_tree[node] = std::max(max_tree[2 * node], max_tree[2 * node + 1]);
        }
    }

    void update(int node, int start, int end, int idx, int new_val) {
        if (start == end) {
            min_tree[node] = new_val;
            max_tree[node] = new_val;
        } else {
            int mid = (start + end) / 2;
            if (idx <= mid)
                update(2 * node, start, mid, idx, new_val);
            else
                update(2 * node + 1, mid + 1, end, idx, new_val);
            min_tree[node] = std::min(min_tree[2 * node], min_tree[2 * node + 1]);
            max_tree[node] = std::max(max_tree[2 * node], max_tree[2 * node + 1]);
        }
    }

    int queryMin(int node, int start, int end, int left, int right) {
        if (left > end || right < start)
            return INT_MAX;
        if (left <= start && right >= end)
            return min_tree[node];
        int mid = (start + end) / 2;
        int left_min = queryMin(2 * node, start, mid, left, right);
        int right_min = queryMin(2 * node + 1, mid + 1, end, left, right);
        return std::min(left_min, right_min);
    }

    int queryMax(int node, int start, int end, int left, int right) {
        if (left > end || right < start)
            return INT_MIN;
        if (left <= start && right >= end)
            return max_tree[node];
        int mid = (start + end) / 2;
        int left_max = queryMax(2 * node, start, mid, left, right);
        int right_max = queryMax(2 * node + 1, mid + 1, end, left, right);
        return std::max(left_max, right_max);
    }

public:
    SegmentTree(const std::vector<int>& arr) {
        n = arr.size();
        min_tree.resize(4 * n);
        max_tree.resize(4 * n);
        build(1, 0, n - 1, arr);
    }

    void updateElement(int idx, int new_val) {
        if (idx < 0 || idx >= n) {
            std::cerr << "Invalid index for update." << std::endl;
            return;
        }
        update(1, 0, n - 1, idx, new_val);
    }

    int queryMin(int left, int right) {
        return queryMin(1, 0, n - 1, left, right);
    }

    int queryMax(int left, int right) {
        return queryMax(1, 0, n - 1, left, right);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_segmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
